% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/message.r
\name{message}
\alias{message}
\alias{warning}
\alias{error}
\alias{fatal}
\alias{debug}
\title{Straightforward logging facilities for Rosen Lab jobs.}
\usage{
message(...,
  file = dynGet("logfile" , inherits = TRUE , ifnotfound = RosenLab:::DEFAULT_MESSAGE_CONNECTION),
  verbosity = dynGet("verbosity" , inherits = TRUE , ifnotfound = RosenLab:::DEFAULT_VERBOSITY),
  domain = NULL , appendLF = NULL)

warning(...,
  file = dynGet("logfile" , inherits = TRUE , ifnotfound = RosenLab:::DEFAULT_MESSAGE_CONNECTION),
  verbosity = dynGet("verbosity" , inherits = TRUE , ifnotfound = RosenLab:::DEFAULT_VERBOSITY),
  call. = TRUE , immediate. = FALSE , noBreaks. = TRUE
  domain = NULL , appendLF = NULL)

error(...,
  file = dynGet("logfile" , inherits = TRUE , ifnotfound = RosenLab:::DEFAULT_MESSAGE_CONNECTION),
  verbosity = dynGet("verbosity" , inherits = TRUE , ifnotfound = RosenLab:::DEFAULT_VERBOSITY),
  call. = TRUE , immediate. = FALSE , noBreaks. = TRUE
  domain = NULL , appendLF = NULL)

fatal(... , status = ...,
  file = dynGet("logfile" , inherits = TRUE , ifnotfound = RosenLab:::DEFAULT_MESSAGE_CONNECTION),
  verbosity = dynGet("verbosity" , inherits = TRUE , ifnotfound = RosenLab:::DEFAULT_VERBOSITY),
  call. = TRUE , domain = NULL , appendLF = NULL)

debug(...,
  file = dynGet("logfile" , inherits = TRUE , ifnotfound = RosenLab:::DEFAULT_MESSAGE_CONNECTION),
  verbosity = dynGet("verbosity" , inherits = TRUE , ifnotfound = RosenLab:::DEFAULT_VERBOSITY),
  domain = NULL , appendLF = NULL)
}
\arguments{
\item{file}{The file (connection) to which the log message is written.}

\item{verbosity}{The verbosity level to apply this message. Defaults to grabbing this value
from the parent environment (via \code{\link[=dynGet]{dynGet()}}).}

\item{domain}{Translate log message via Native Language Support. See \code{\link[base:gettext]{base::gettext()}}
more details about this. If \code{NA}, messages will not be translated; \code{NULL}
(default) implies domain "R-pkg".}

\item{appendLF}{IGNORED. This option exists for compatibility with built-in functions with
the same name as any of these functions. See the details section for more
information about line breaks in messages.}

\item{call.}{IGNORED. This named argument exists only for "compatibility" with existing
calls to \code{\link[base:warning]{base::warning()}}, \code{\link[base:stop]{base::stop()}}, etc. The calling context is
always logged.}

\item{immediate.}{IGNORED. This named argument exists only for "compatibility" with existing
calls to \code{\link[base:warning]{base::warning()}}, \code{\link[base:stop]{base::stop()}}, etc. Warnings are always logged
immediately.}

\item{noBreaks.}{IGNORED. This named argument exists only for "compatibility" with existing
calls to \code{\link[base:warning]{base::warning()}}, \code{\link[base:stop]{base::stop()}}, etc. See the details section
for more information about line breaks in messages.}

\item{status}{The exit status. See \code{\link[base:quit]{base::quit()}} for more details about appropriate
values for this argument.}
}
\description{
These functions aim to provide a base logging interface for users using a
familiar "API". They are not intended to be used for any serious logging
activities that require advanced features, such as asynchronous or fail-safe
logging. Speed was also not a consideration in the design of these functions.
}
\details{
There are five (5) log levels, with corresponding function names, which in
order of increasing verbosity are: \code{\link[=fatal]{fatal()}}, \code{\link[=error]{error()}}, \code{\link[=warning]{warning()}},
\code{\link[=message]{message()}}, and \code{\link[=debug]{debug()}}. Errors, fatal errors, and warnings "always" write
their messages to the appropriate connection (see below). Messages, debugging
or otherwise, will only write their messages to this connection if value of
their \code{\link{verbosity}} argument is high enough.

By default, all messaging functions will "inherit" their message connection
and the verbosity level from the calling environment (via \code{\link[base:dynGet]{base::dynGet()}}).
The message connection will inherit from the variable \code{message_connection},
while the verbosity level inherits from the \code{verbosity} variable. Whenever
either of these variables are not defined (or otherwise uninheritable), the
values \code{\link[=stderr]{stderr()}} and \code{0} are substituted, respectively. These values may
be changed ona per-call basis, via the \code{file} and \code{verbosity} arguments.

Some of these functions mask built-in functions in the base R package. Both
\code{\link[=warning]{warning()}} and \code{\link[=message]{message()}} \emph{should} be seamlessly compatible with these
built-ins (\code{\link[base:warning]{base::warning()}} and \code{\link[base:message]{base::message()}}, respectively). The
\code{\link[=debug]{debug()}} function is not backwards compatible, although this function
should probably(?) not be used in any released code; developers can still
use \code{\link[base:debug]{base::debug()}} for this purpose.

The built-in functions \code{\link[=suppressWarnings]{suppressWarnings()}} and \code{\link[=suppressMessages]{suppressMessages()}},
likewise, \emph{should} work as before with these functions. Their use is
discouraged, however.
}
